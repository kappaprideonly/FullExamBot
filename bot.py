from aiogram import Bot, Dispatcher, executor, types
import pymysql
import random
import os
from keyboard import keyboard_answer, keyboard_no_yes
#from pprint import pprint


#—Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥
full_info = [[] for _ in range(26)]
for i in range(26):
    with open(f"data/task_{i + 1}.txt", "r") as file:
        f = file.read()
    for j in f.split("&\n"):
        if (len(j) < 2):
            continue
        info = j.split("#\n")
        text = info[0].strip()
        answer = info[1].strip()
        full_info[i].append([text, answer])
#print(full_info[25][0][1]) 26 –Ω–æ–º–µ—Ä 1 –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç



token = os.environ.get('TOKEN')
bot = Bot(token=token)
dp = Dispatcher(bot)
db = pymysql.connect(
        host='35.232.17.130',
        user='standart',
        password='1',
        database='ege_russian_db',
        cursorclass=pymysql.cursors.DictCursor)
cur = db.cursor()

# query = """CREATE TABLE users
#                 (
#                     id text,
#                     first_name text,
#                     last_name text,
#                     activity integer,
#                     task_number integer,
#                     records MEDIUMTEXT,
#                     current_score MEDIUMTEXT
#                 )"""


def find_in_data(id_user):
    cur.execute(f"SELECT * FROM users WHERE id = '{id_user}'")
    res = cur.fetchall()
    return res != ()

@dp.message_handler(commands="start")
async def start(message: types.Message):
    if not find_in_data(message.from_user.id):
        id = message.from_user.id
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        activity = 0
        task_number = 0
        answer = "-1"
        records = "0." * 25 + "0"
        current_score = "0." * 25 + "0"
        query = f"INSERT INTO users(id, first_name, last_name, activity, task_number, answer, records, current_score) VALUES('{id}', '{first_name}', '{last_name}', '{activity}', '{task_number}', '{answer}', '{records}', '{current_score}')"
        cur.execute(query)
        db.commit()
    activity = 0
    task_number = 0
    answer = "-1"
    cur.execute(f"UPDATE users SET activity = '{activity}', current_score = '{current_score}', task_number = '{task_number}', answer = '{answer}' WHERE id = '{message.from_user.id}'")
    db.commit()
    text = f"üñêüèæ –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>.\n–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?"
    keyboard = keyboard_no_yes()
    await message.answer(text, parse_mode="html", reply_markup=keyboard)


@dp.message_handler(commands="record")
async def record(message: types.Message):
    if not find_in_data(str(message.from_user.id)):
        text = f"–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start, {message.from_user.id.first_name}"
        await message.answer(text, parse_mode="html")
        return
    cur.execute(f"SELECT task_number, records FROM users WHERE id = '{message.from_user.id}'")
    info = cur.fetchall()[0]
    task_number = info["task_number"]
    records = info["records"]
    if task_number == 0:
        await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ!")
    record = records.split(".")[task_number - 1]
    text = f"üèãüèø‚Äç‚ôÄÔ∏è –í–∞—à —Ä–µ–∫–æ—Ä–¥ –≤ –∑–∞–¥–∞–Ω–∏–∏ ‚Ññ {task_number}: {record}"
    await message.answer(text, parse_mode="html")


@dp.message_handler(commands="users")
async def users(message: types.Message):
    cur.execute("SELECT * FROM users")
    res = cur.fetchall()
    text = f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(res)}"
    await message.answer(text, parse_mode="html")


@dp.message_handler(commands="update")
async def update(message: types.Message):
    cur.execute(f"UPDATE users SET first_name = '{message.from_user.first_name}', last_name = '{message.from_user.last_name}' WHERE id = '{message.from_user.id}'")
    db.commit()
    text = f"üòâ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
    await message.answer(text, parse_mode="html")


@dp.message_handler(commands="leaderboard")
async def leaderboard(message: types.Message):
    cur.execute(f"SELECT task_number FROM users WHERE id = '{message.from_user.id}'")
    task_number = cur.fetchall()[0]["task_number"]
    if (task_number == 0):
        await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ!")
    cur.execute("SELECT first_name, last_name, records FROM users")
    info = cur.fetchmany(10)
    leader_board = [{} for _ in range(len(info))]
    for j in range(len(info)):
        leader_board[j]["first_name"] = info[j]["first_name"]
        leader_board[j]["last_name"] = info[j]["last_name"]
        leader_board[j]["score"] = int(info[j]["records"].split(".")[task_number - 1])
    leader_board.sort(key=lambda x: x["score"])
    text = f"üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–∏—é {task_number}:\n\n"
    num = 0
    for j in reversed(leader_board):
        num += 1
        first_name = j["first_name"]
        last_name = j["last_name"]
        score = j["score"]
        if num == 1:
            text += "ü•á "
        elif num == 2:
            text += "ü•à "
        elif num == 3:
            text += "ü•â "
        else:
            text += f" {num}. "
        if last_name != 'None':
            text += f"{first_name} {last_name} ‚Äî {score}\n"
        else:
            text += f"{first_name} ‚Äî {score}\n"
    await message.answer(text, parse_mode="html")

@dp.message_handler()
async def training(message: types.Message):
    if not find_in_data(str(message.from_user.id)):
        text = f"–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start, {message.from_user.first_name}"
        await message.answer(text, parse_mode="html")
        return
    cur.execute(f"SELECT activity, task_number FROM users WHERE id = '{message.from_user.id}'")
    info = cur.fetchall()[0]
    activity = info["activity"]
    task_number = info["task_number"]
    if activity:
        activity = 0
        user_id = message.from_user.id

        cur.execute(f"SELECT answer, current_score, records, task_number FROM users WHERE id = '{user_id}'")
        info = cur.fetchall()[0]
        task_number = info["task_number"]
        answer = info["answer"]
        current_score = int(info["current_score"].split(".")[task_number - 1])
        score = int(info["records"].split(".")[task_number - 1])
        if message.text == answer:
            current_score += 1
            if current_score > score:
                score = current_score
            answer = ""
            text = f"‚úÖ <b>–í–µ—Ä–Ω–æ!</b> –ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∞–ª—å—à–µ?\n<b>score:{current_score}</b>"
            keyboard = keyboard_no_yes()
            records = info["records"].split(".")
            records[task_number - 1] = str(score)
            records = ".".join(records)
            current_scores = info["current_score"].split(".")
            current_scores[task_number - 1] = str(current_score)
            current_scores = ".".join(current_scores)
            cur.execute(f"UPDATE users SET activity = '{activity}', answer = '{answer}', current_score = '{current_scores}', records = '{records}' WHERE id = '{message.from_user.id}'")
            db.commit()
            await message.answer(text, parse_mode="html", reply_markup=keyboard)
        else:
            if current_score > score:
                score = current_score
            current_score = 0
            text = f"‚ùå <b>–ù–ï–í–ï–†–ù–û! </b>\n –ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –≤—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?"
            keyboard = keyboard_no_yes()
            answer = ""
            records = info["records"].split(".")
            records[task_number - 1] = str(score)
            records = ".".join(records)
            current_scores = info["current_score"].split(".")
            current_scores[task_number - 1] = str(current_score)
            current_scores = ".".join(current_scores)
            cur.execute(f"UPDATE users SET activity = '{activity}', answer = '{answer}', current_score = '{current_scores}', records = '{records}' WHERE id = '{message.from_user.id}'")
            db.commit()
            await message.answer(text, parse_mode="html", reply_markup=keyboard)
    elif message.text == "–î–∞" and task_number == 0:
        text = "ü§© –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –æ—Ç 1 –¥–æ 26"
        await message.answer(text, parse_mode="html")
    elif task_number == 0 and any(message.text == str(x + 1) for x in range(26)):
        text = f"üò± –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è {message.text}\n–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —Ä–∞–±–æ—Ç–∞—é—Ç —Å —ç—Ç–∏–º –∑–∞–¥–∞–Ω–∏–µ–º!\n–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é!?"
        task_number = message.text
        cur.execute(f"UPDATE users SET task_number = '{task_number}' WHERE id = '{message.from_user.id}'")
        db.commit()
        await message.answer(text, parse_mode="html")
    elif message.text == "–î–∞" or message.text == "–î–∞–ª–µ–µ" and not activity:
        activity = 1
        text, answer = get_variant(task_number - 1)
        cur.execute(f"UPDATE users SET activity = '{activity}', answer = '{answer}' WHERE id = '{message.from_user.id}'")
        db.commit()
        await message.answer(text, parse_mode="html")
    elif message.text == "–ù–µ—Ç":
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        key_start = types.InlineKeyboardButton(text='/start', callback_data='/start')
        keyboard.add(key_start)
        text = "üò≥ –•–æ—Ä–æ—à–æ, –Ω–æ –∑–∞–¥—É–º–∞–π—Å—è –Ω–∞–¥ –ø–æ—Å–ª–æ–≤–∏—Ü–µ–π:\n–®–µ–≤–µ–ª–∏ —Ä–∞–Ω—å—à–µ <b>–º–æ–∑–≥–∞–º–∏</b>, –∞ —Ç–æ –ø–æ–ø–ª–∞—Ç–∏—à—å—Å—è <b>—â–µ–∫–∞–º–∏</b>."
        await message.answer(text, parse_mode="html", reply_markup=keyboard)
    else:
        await message.answer(
                         f"üò° –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –¥—Ä—É–∂–∏—â–µ. –°–æ–±–µ—Ä–∏—Ç–µ—Å—å, <b>{message.from_user.first_name}</b>",
                         parse_mode="html")

while True:
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        time.sleep(15)
db.close()
